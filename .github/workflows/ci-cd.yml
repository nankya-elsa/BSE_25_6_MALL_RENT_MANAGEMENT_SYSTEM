name: CI/CD Pipeline

on:
  push:
    branches:
      - main #Production branch
      - staging #Staging branch
      #- ci-cd-pipeline # Development branch
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        working-directory: ./backend
        env:
          SECRET_KEY: test-secret-key
          DEBUG: True
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
        run: |
          python manage.py test

  # Job 2: Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run tests
        working-directory: ./frontend
        run: npm test

  # Job 3: Build Frontend
  frontend-build:
    name: Build Frontend
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Determine API URL
        id: api-url
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "url=https://mall-rent-management-system-backend.onrender.com" >> $GITHUB_OUTPUT
          else
            echo "url=https://mall-rent-backend-staging.onrender.com" >> $GITHUB_OUTPUT
          fi

      - name: Build
        working-directory: ./frontend
        env:
          VITE_API_URL: ${{ steps.api-url.outputs.url }}
        run: npm run build

  # Job 4: Deploy Notification
  deploy-success:
    name: Deployment Ready
    needs: [backend-test, frontend-test, frontend-build]
    runs-on: ubuntu-latest

    steps:
      - name: Deployment notification
        run: |
          echo "All tests passed!"
          echo "Build successful!"
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "Deploying to PRODUCTION"
          else
            echo "Deploying to STAGING"
          fi

  # Job 5: Verify Production Deployment (Automated Rollback Alternative)
  verify-deployment:
    name: Verify Deployment Health
    needs: [backend-test, frontend-test, frontend-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for Render deployment
        run: |
          echo "Waiting 90 seconds for Render to deploy..."
          sleep 90

      - name: Check backend health
        run: |
          echo " Checking production backend health..."

          for i in {1..10}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://mall-rent-management-system-backend.onrender.com/health/)
            
            if [ $response -eq 200 ]; then
              echo "Backend health check passed!"
              curl -s https://mall-rent-management-system-backend.onrender.com/health/ | python3 -m json.tool
              break
            else
              echo "Attempt $i: Health check returned $response, retrying..."
              
              if [ $i -eq 10 ]; then
                echo "DEPLOYMENT FAILED - Health checks failed after 10 attempts"
                echo "MANUAL ROLLBACK REQUIRED:"
                echo "   1. Go to https://dashboard.render.com"
                echo "   2. Select mall-rent-management-system-backend"
                echo "   3. Click 'Deploys' tab"
                echo "   4. Click 'Rollback to this deploy' on last working version"
                exit 1
              fi
              
              sleep 15
            fi
          done

      - name: Check frontend availability
        run: |
          echo "Checking production frontend..."

          response=$(curl -s -o /dev/null -w "%{http_code}" https://mall-rent-frontend.onrender.com/)

          if [ $response -eq 200 ]; then
            echo "Frontend is accessible!"
          else
            echo "Frontend returned status: $response"
          fi
