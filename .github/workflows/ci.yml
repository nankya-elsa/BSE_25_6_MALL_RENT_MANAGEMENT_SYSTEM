name: CI Pipeline

# Trigger CI on push to main branch and on pull requests
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # ==================== BACKEND JOB ====================
  backend-tests:
    name: Backend - Django Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17.5
        env:
          POSTGRES_USER: rms_user
          POSTGRES_PASSWORD: emerge@2025
          POSTGRES_DB: mall_rent_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Phase 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Phase 2: Set up Python environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: backend/requirements.txt

      # Phase 3: Install dependencies
      - name: Install Python dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      # Phase 4: Set up environment variables
      - name: Create .env file
        run: |
          cd backend
          cat > .env << EOF
          SECRET_KEY=test-secret-key-for-ci-only
          DEBUG=True
          POSTGRES_DB=mall_rent_db_test
          POSTGRES_USER=rms_user
          POSTGRES_PASSWORD=emerge@2025
          POSTGRES_HOST=localhost
          POSTGRES_PORT=5432
          EOF

      # Phase 5: Run migrations
      - name: Run Django migrations
        run: |
          cd backend
          python manage.py migrate --noinput

      # Phase 6: Run Django tests
      - name: Run Django tests
        run: |
          cd backend
          python manage.py test

      # Phase 7: Check for missing migrations
      - name: Check for missing migrations
        run: |
          cd backend
          python manage.py makemigrations --check --dry-run --noinput

  # ==================== FRONTEND JOB ====================
  frontend-tests:
    name: Frontend - React Tests
    runs-on: ubuntu-latest

    steps:
      # Phase 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Phase 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      # Phase 3: Install dependencies
      - name: Install npm dependencies
        run: |
          cd frontend
          npm ci

      # Phase 4: Run linting (optional - add if you have eslint configured)
      # - name: Run ESLint
      #   run: |
      #     cd frontend
      #     npm run lint

      # Phase 5: Run TypeScript type checking
      - name: TypeScript type check
        run: |
          cd frontend
          npx tsc --noEmit

      # Phase 6: Run tests
      - name: Run Jest tests
        run: |
          cd frontend
          npm test -- --passWithNoTests

      # Phase 7: Build application
      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # ==================== CODE QUALITY JOB (Optional) ====================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Python code quality
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install flake8
        run: pip install flake8

      - name: Run flake8 (Python linting)
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,migrations
        continue-on-error: true
